{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","loading","list","dcheros","showDetails","charDetails","backupData","searchString","fetch","response","json","data","this","setState","i","length","biography","publisher","push","value","trim","filter","entry","Object","values","some","val","includes","className","name","align","src","alt","onChange","event","performSearch","target","placeholder","map","images","sm","onClick","openData","backToMainScreen","md","aliases","alignment","fullName","appearance","height","weight","alterEgos","placeOfBirth","work","base","occupation","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6PAwMeA,G,kNAnMbC,MAAQ,CACNC,SAAS,EACTC,KAAM,GACNC,QAAS,GACTC,aAAa,EACbC,YAAa,GACbC,WAAY,GACZC,aAAc,I,4LAIF,sD,SACWC,MADX,uD,cACNC,E,gBACaA,EAASC,O,OAE5B,IAFMC,E,OACNC,KAAKC,SAAS,CAAEX,KAAMS,IACbG,EAAI,EAAGA,EAAIF,KAAKZ,MAAME,KAAKa,OAAQD,IACK,cAA3CF,KAAKZ,MAAME,KAAKY,GAAGE,UAAUC,YAC/BL,KAAKZ,MAAMG,QAAQe,KAAKN,KAAKZ,MAAME,KAAKY,IACxCF,KAAKZ,MAAMM,WAAWY,KAAKN,KAAKZ,MAAME,KAAKY,KAG/CF,KAAKC,SAAS,CAAEV,QAASS,KAAKZ,MAAMG,UACpCS,KAAKC,SAAS,CAAEP,WAAYM,KAAKZ,MAAMM,a,+KAG1Ba,G,iEACbP,KAAKZ,MAAMK,YAAcc,EACzBP,KAAKZ,MAAMI,aAAc,EACzBQ,KAAKC,SACH,CACER,YAAaO,KAAKZ,MAAMK,YACxBD,YAAaQ,KAAKZ,MAAMI,c,0PAK5BQ,KAAKZ,MAAMK,YAAc,GACzBO,KAAKZ,MAAMI,aAAc,EACzBQ,KAAKC,SACH,CACER,YAAaO,KAAKZ,MAAMK,YACxBD,YAAaQ,KAAKZ,MAAMI,c,0IAKhBe,GACS,KAAjBA,EAAMC,OACRR,KAAKC,SAAS,CACZN,aAAcY,EACdhB,QAASS,KAAKZ,MAAMM,WAAWe,QAAO,SAAAC,GAAK,OACzCC,OAAOC,OAAOF,GAAOG,MAAK,SAAAC,GAAG,MACZ,kBAARA,GAAoBA,EAAIC,SAASR,WAI9CP,KAAKC,SAAS,CACZN,aAAcY,EACdhB,QAASS,KAAKZ,MAAMM,e,+BAKhB,IAAD,OACP,OACE,yBAAKsB,UAAU,sBAAsBC,KAAK,KAAKC,MAAM,UAC3B,IAAvBlB,KAAKZ,MAAMG,QACP,6CAED,8BAC8B,IAA3BS,KAAKZ,MAAMI,YACV,6BACE,yBAAKwB,UAAU,WAAf,2CACA,yBAAKA,UAAU,WACb,yBAAKA,UAAU,OAAOG,IAAI,iFAAiFC,IAAI,aAEjH,yBAAKJ,UAAU,YACb,2BAAOK,SAAU,SAACC,GAAD,OAAW,EAAKC,cAAcD,EAAME,OAAOjB,QAAQA,MAAOP,KAAKZ,MAAMO,aAAc8B,YAAY,qCAGlH,6BACA,yBAAKT,UAAU,oBACZhB,KAAKZ,MAAMG,QAAQmC,KAAI,SAAApC,GAAI,OAC1B,yBAAK6B,IAAK7B,EAAKqC,OAAOC,GAAIC,QAAS,kBAAM,EAAKC,SAASxC,IAAO8B,IAAI,uBAKtE,6BACE,yBAAKJ,UAAU,gBACb,yBAAKA,UAAU,eAAeG,IAAI,oBAAoBU,QAAS,kBAAM,EAAKE,oBAAoBX,IAAI,cAClG,4BAAKpB,KAAKZ,MAAMK,YAAYwB,OAE9B,6BACE,yBAAKD,UAAU,YAAYG,IAAKnB,KAAKZ,MAAMK,YAAYkC,OAAOK,GAAIZ,IAAI,eAExE,6BACmD,MAAhDpB,KAAKZ,MAAMK,YAAYW,UAAU6B,QAAQ,GAAc,gDACtD,iCACIjC,KAAKZ,MAAMK,YAAYW,UAAU6B,QAAQP,KAAI,SAAAO,GAAO,OACtD,+BAAQA,EAAR,SAFF,MAQJ,6BACkD,SAA/CjC,KAAKZ,MAAMK,YAAYW,UAAU8B,UAChC,oCAEE,6BACkD,YAA/ClC,KAAKZ,MAAMK,YAAYW,UAAU8B,UAE9B,yCAEA,yCAKZ,6BACE,+BACE,+BACE,4BACE,2CAGA,4BACGlC,KAAKZ,MAAMK,YAAYW,UAAU+B,WAGtC,4BACE,wCAGA,4BACGnC,KAAKZ,MAAMK,YAAY2C,WAAWC,OAAO,KAG9C,4BACE,wCAGA,4BACGrC,KAAKZ,MAAMK,YAAY2C,WAAWE,OAAO,KAG9C,4BACE,yCAGA,4BACGtC,KAAKZ,MAAMK,YAAYW,UAAUmC,YAGtC,4BACE,4CAGA,4BACGvC,KAAKZ,MAAMK,YAAYW,UAAUoC,eAGtC,4BACE,oCAGA,4BACGxC,KAAKZ,MAAMK,YAAYgD,KAAKC,OAGjC,4BACE,0CAGA,4BACG1C,KAAKZ,MAAMK,YAAYgD,KAAKE,eAKrC,qC,GAvLJC,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.03ab5e28.chunk.js","sourcesContent":["import React, { Component }  from 'react';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    loading: true,\n    list: [],\n    dcheros: [],\n    showDetails: false,\n    charDetails: '',\n    backupData: [],\n    searchString: \"\"\n  }\n\n  async componentDidMount() {\n    const url = 'https://akabab.github.io/superhero-api/api/all.json';\n    const response = await fetch(url);\n    const data = await response.json();\n    this.setState({ list: data })\n    for (let i = 0; i < this.state.list.length; i++) {\n      if (this.state.list[i].biography.publisher === \"DC Comics\") {\n        this.state.dcheros.push(this.state.list[i]);\n        this.state.backupData.push(this.state.list[i]);\n      }\n    }\n    this.setState({ dcheros: this.state.dcheros });\n    this.setState({ backupData: this.state.backupData });\n  }\n\n  async openData(value) {\n    this.state.charDetails = value;\n    this.state.showDetails = true;\n    this.setState(\n      {\n        charDetails: this.state.charDetails,\n        showDetails: this.state.showDetails\n      }\n    )\n  }\n  async backToMainScreen() {\n    this.state.charDetails = '';\n    this.state.showDetails = false;\n    this.setState(\n      {\n        charDetails: this.state.charDetails,\n        showDetails: this.state.showDetails\n      }\n    )\n  }\n\n  performSearch(value) {\n    if (value.trim() !== \"\") {\n      this.setState({\n        searchString: value,\n        dcheros: this.state.backupData.filter(entry =>\n          Object.values(entry).some(val =>\n            typeof val === \"string\" && val.includes(value))),\n      })\n    }\n    else {\n      this.setState({\n        searchString: value,\n        dcheros: this.state.backupData,\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App blackbackgroung\" name=\"dc\" align=\"center\">\n        {this.state.dcheros === 0\n          ? (<div> loading... </div>)\n          : (\n            < div >\n              {this.state.showDetails === false ? (\n                < div >\n                  <div className=\"Heading\"> Welcome to Dc Published charater List </div>\n                  <div className=\"logodiv\">\n                    <img className=\"logo\" src=\"http://pluspng.com/img-png/dc-comics-logo-png-this-one-is-my-favorite-2953.png\" alt=\"dc logo\"></img>\n                  </div >\n                  <div className=\"inputdiv\">\n                    <input onChange={(event) => this.performSearch(event.target.value)} value={this.state.searchString} placeholder=\" Search Dc published Character \"></input>\n                    {/* <img className=\"searchimg\" src=\"search_18dp.png\" alt=\"search\"></img> */}\n                  </div>\n                  <br />\n                  <div className=\"horizontalScroll\">\n                    {this.state.dcheros.map(list => (\n                      <img src={list.images.sm} onClick={() => this.openData(list)} alt=\"charater logo\"></img>\n                    ))}\n                  </div>\n                </div>\n              ) : (\n                  <div>\n                    <div className=\"backImageDiv\">\n                      <img className=\"backToScreen\" src=\"back-arrow-48.png\" onClick={() => this.backToMainScreen()} alt=\"back logo\"></img>\n                      <h2>{this.state.charDetails.name}</h2>\n                    </div>\n                    <div>\n                      <img className=\"charImage\" src={this.state.charDetails.images.md} alt=\"char logo\"></img>\n                    </div>\n                    <div>\n                      {this.state.charDetails.biography.aliases[0] === \"-\" ? (<small>No Alter Name</small>) : (\n                        <div>\n                          ({this.state.charDetails.biography.aliases.map(aliases => (\n                          <small>{aliases}, </small>\n                        ))})\n                        </div>\n                      )}\n\n                    </div>\n                    <div>\n                      {this.state.charDetails.biography.alignment === \"good\" ? (\n                        <h1>Hero</h1>\n                      ) : (\n                          <div>\n                            {this.state.charDetails.biography.alignment === \"neutral\"\n                              ? (\n                                <h1>Anti Hero</h1>\n                              ) : (\n                                <h1>villain</h1>\n                              )}\n                          </div>\n                        )}\n                    </div>\n                    <div>\n                      <table>\n                        <tbody>\n                          <tr>\n                            <td>\n                              Full Name :\n                            </td>\n                            <td>\n                              {this.state.charDetails.biography.fullName}\n                            </td>\n                          </tr>\n                          <tr>\n                            <td>\n                              Height :\n                            </td>\n                            <td>\n                              {this.state.charDetails.appearance.height[0]}\n                            </td>\n                          </tr>\n                          <tr>\n                            <td>\n                              Weight :\n                            </td>\n                            <td>\n                              {this.state.charDetails.appearance.weight[1]}\n                            </td>\n                          </tr>\n                          <tr>\n                            <td>\n                              AlterEgos\n                            </td>\n                            <td>\n                              {this.state.charDetails.biography.alterEgos}\n                            </td>\n                          </tr>\n                          <tr>\n                            <td>\n                              PlaceOfBirth\n                            </td>\n                            <td>\n                              {this.state.charDetails.biography.placeOfBirth}\n                            </td>\n                          </tr>\n                          <tr>\n                            <td>\n                              Base\n                            </td>\n                            <td>\n                              {this.state.charDetails.work.base}\n                            </td>\n                          </tr>\n                          <tr>\n                            <td>\n                              Occupation\n                            </td>\n                            <td>\n                              {this.state.charDetails.work.occupation}\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                      <br></br>\n                    </div>\n                  </div>\n                )}\n\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}